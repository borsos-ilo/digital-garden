---
import type { CollectionEntry } from 'astro:content'
import { getCollection, render } from 'astro:content'
import Comments from '@/components/Comments/index.astro'
import PostDate from '@/components/PostDate.astro'
import BackButton from '@/components/Widgets/BackButton.astro'
import TOC from '@/components/Widgets/TOC.astro'
import { defaultLocale } from '@/config'
import { getTagPath } from '@/i18n/path'
import Layout from '@/layouts/Layout.astro'
import { checkPostSlugDuplication } from '@/utils/content'
import { generateDescription } from '@/utils/description'

export async function getStaticPaths() {
  const posts = await getCollection('posts')

  // Check if there are duplicate post slugs
  const duplicates = await checkPostSlugDuplication(posts)
  if (duplicates.length > 0) {
    throw new Error(`Duplicate post slugs:\n${duplicates.join('\n')}`)
  }

  type PathItem = {
    params: { posts_slug: string }
    props: { post: any, lang: string, supportedLangs: string[] }
  }

  const paths: PathItem[] = []

  posts.forEach((post: CollectionEntry<'posts'>) => {
    // Show drafts in dev mode only
    if (import.meta.env.DEV || !post.data.draft) {
      const slug = post.data.abbrlink || post.id
      paths.push({
        params: { posts_slug: `posts/${slug}/` },
        props: {
          post,
          lang: defaultLocale,
          supportedLangs: [defaultLocale],
        },
      })
    }
  })

  return paths
}

const { post, lang, supportedLangs } = Astro.props
const description = generateDescription(post, 'meta')
const { Content, headings, remarkPluginFrontmatter } = await render(post)
---

<Layout
  postTitle={post.data.title}
  postDescription={description}
  postSlug={post.id}
  supportedLangs={supportedLangs}
>
  <article class="heti mb-12.6">
    <div class="relative">
      <!-- Go Back Button On Desktop -->
      <BackButton />
      <!-- Title -->
      <h1 class="post-title">
        <span
          transition:name={`post-${post.data.abbrlink || post.id}-${lang}`}
          data-disable-theme-transition
        >
          {post.data.title}
        </span>
        {/* status emoji */}
        {post.data.status && (
          <span
            class="ml-0.5em text-0.8em"
            title={`Status: ${post.data.status === '🌱' ? 'Seedling' : post.data.status === '🍃' ? 'Growing' : 'Mature'}`}
          >
            {post.data.status}
          </span>
        )}
      </h1>
    </div>

    <!-- Date -->
    <div
      id="gsap-post-page-date"
      class="mb-16.3 block c-primary font-time"
      transition:name={`time-${post.data.abbrlink || post.id}-${lang}`}
      data-disable-theme-transition
    >
      <PostDate
        date={post.data.published}
        updatedDate={post.data.updated}
        minutes={remarkPluginFrontmatter.minutes}
      />
    </div>
    <!-- TOC -->
    {post.data.toc && <TOC headings={headings} />}
    <!-- Content -->
     <div id="gsap-post-page-content">
      <Content />
    </div>
  </article>

  <!-- Tags -->
  {post.data.tags && post.data.tags.length > 0 && (
    <div id="gsap-post-page-tags">
      <div class="uno-decorative-line"></div>
      <div class="uno-tags-wrapper">
        {post.data.tags.map((tag: string) => (
          <a
            href={getTagPath(tag, lang)}
            class="uno-tags-style"
          >
            {tag}
          </a>
        ))}
      </div>
    </div>
  )}
  <!-- Comments -->
  <Comments />
</Layout>
